; Arithmetic Operators
(def + (fn [] 0))
(def + (fn [a] a))
(def + (fn [a b] (add a b)))
(def + (fn [a b & rest] (apply + (+ a b) rest)))

(def - (fn [] 0))
(def - (fn [a] (* a -1)))
(def - (fn [a b] (subtract a b)))
(def - (fn [a b & rest] (apply - (- a b) rest)))

(def * (fn [] 1))
(def * (fn [a] a))
(def * (fn [a b] (multiply a b)))
(def * (fn [a b & rest] (apply * (* a b) rest)))

(def / (fn [a] a))
(def / (fn [a b] (divide a b)))
(def / (fn [a b & rest] (apply / (/ a b) rest)))

; Comparison Operators
(def = eq?)
(def > gt?)
(def < lt?)
(def gt_or_eq? (fn [a b] (or (> a b) (= a b))))
(def lt_or_eq? (fn [a b] (or (< a b) (= a b))))
(def >= gt_or_eq?)
(def <= lt_or_eq?)

; Constructor Operators
(def : cons)

; Search
(def min (fn [a] a))
(def min (fn [a & rest]
  (let [b (apply min rest)] 
    (if (<= a b) a b))))

(def max (fn [a] a))
(def max (fn [a & rest]
  (let [b (apply max rest)] 
    (if (>= a b) a b))))

; Other
(def foldl (fn [f acc coll]
  (if (empty? coll) acc
    (foldl f (f acc (head coll)) (tail coll)))))

(def foldr (fn [f acc coll]
  (if (empty? coll) acc
    (f (foldr f acc (tail coll)) (head coll)))))

; I just defined this simply because I wanted
; a function to play with :) 
(def double (fn [i] (+ i i)))

(def expi (fn [i] 
  (expi (inspect (+ 1 i)))))
